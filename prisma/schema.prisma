// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BankCard {
  id String @id @default(nanoid()) // updated as per Wednesday's Nandir bagshiin comment
  country String
  firstName String
  lastName String
  cardNumber String @unique @db.VarChar(20) // updated as per Wednesday's Nandir bagshiin comment
  expiryDate DateTime 
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  username String
  receivedDonations Donation[] @relation("Donor")
  sendDonations Donation[] @relation("Recipient")
  createdAt DateTime @default(now())
  profile Profile?
  profileId Int @unique
  bankCard BankCard[]
  updatedAt  DateTime   @updatedAt
}

model Donation{
  id Int @id @default(autoincrement())
  amount Int
  specialMessage String
  socialURLOrBuyMeACoffee String
  donor User @relation("Donor",fields: [donorId], references: [id])
  donorId Int 
  recipient User @relation("Recipient",fields: [recipientId], references: [id])
  recipientId Int
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
}

model Profile{
  id Int @id @default(autoincrement())
  name String
  about String
  avatarImage String
  socialMediaURL String
  backgroundImage String
  successMessage String
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  createdAt DateTime @default(now())
  updatedAt  DateTime   @updatedAt
}